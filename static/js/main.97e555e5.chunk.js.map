{"version":3,"sources":["components/clock.js","components/scorecard.js","App.js","serviceWorker.js","index.js"],"names":["clock","state","time","this","interval","setInterval","setState","moment","format","clearInterval","style","color","Component","scorecard","props","console","log","className","data","homeTeam","name","textAlign","score","fullTime","awayTeam","axios","require","App","error","isLoaded","matches","get","headers","then","response","catch","matchList","length","slice","reverse","map","float","display","paddingRight","fontSize","paddingTop","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4RAGqBA,E,4MACnBC,MAAQ,CACNC,KAAM,M,kEAEa,IAAD,OAClBC,KAAKC,SAAWC,aACd,kBAAM,EAAKC,SAAS,CAAEJ,KAAMK,MAASC,OAAO,2BAC5C,O,6CAIFC,cAAcN,KAAKC,Y,+BAGnB,OAAO,uBAAGM,MAAO,CAAEC,MAAO,WAAaR,KAAKF,MAAMC,U,GAdnBU,aC4BpBC,MA7Bf,SAAmBC,GAGjB,OAFAC,QAAQC,IAAIF,GAGV,yBAAKG,UAAU,cACb,yBAAKP,MAAO,CAAEC,MAAO,YAAcG,EAAMI,KAAKC,SAASC,MACvD,yBAAKV,MAAO,CAAEW,UAAW,WACtBP,EAAMI,KAAKI,MAAMC,SAASJ,UAE7B,yBAAKT,MAAO,CAAEW,UAAW,WAAzB,KACA,yBAAKX,MAAO,CAAEW,UAAW,WACtBP,EAAMI,KAAKI,MAAMC,SAASC,UAE7B,yBAAKd,MAAO,CAAEC,MAAO,YAAcG,EAAMI,KAAKM,SAASJ,QCVvDK,EAAQC,EAAQ,IAEDC,E,kDACnB,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDb,MAAQ,CACX2B,MAAO,KACPC,UAAU,EACVC,QAAS,IALM,E,gEASE,IAAD,OAClBL,EACGM,IACC,2EACA,CACEC,QAAS,CAAE,eAAgB,sCAG9BC,MAAK,SAACC,GACL,IAAMhB,EAAOgB,EAAShB,KAAKY,QAC3B,EAAKxB,SAAS,CACZuB,UAAU,EACVC,QAASZ,IAEXH,QAAQC,IAAIkB,MAEbC,OAAM,SAAUP,GAEfb,QAAQC,IAAIY,MAEbK,MAAK,iB,+BAKA,IACAH,EAAY3B,KAAKF,MAAjB6B,QACFM,EAAYN,EAAQO,OACxB,6BACGP,EACEQ,MAAMR,EAAQO,OAAS,GAAIP,EAAQO,QACnCE,UACAC,KAAI,SAACtB,GAAD,OACH,kBAAC,EAAD,CAAWA,KAAMA,QAIvB,iDAGF,OACE,yBAAKD,UAAU,OACb,yBAAKA,UAAW,SAAUP,MAAO,CAAE+B,MAAO,UACxC,yBAAK/B,MAAO,CAAEgC,QAAS,qBAAsBD,MAAO,UAClD,uBAAG/B,MAAO,CAAEiC,aAAc,SAA1B,iBACA,kBAAC,EAAD,QAIJ,yBAAK1B,UAAW,kBACd,yBAAKA,UAAW,YACd,kCAEF,yBAAKA,UAAW,YACd,kCAEF,yBAAKA,UAAW,YACd,kCAEF,yBAAKA,UAAW,iBACd,wBAAIA,UAAW,YAAaP,MAAO,CAAEC,MAAO,YAA5C,cAKJ,wBAAID,MAAO,CAAEC,MAAO,UAAWiC,SAAU,OAAQC,WAAY,SAA7D,gCAGA,yBAAK5B,UAAW,UAAWmB,Q,GA9EFU,IAAMlC,WCKnBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAP,GACLb,QAAQa,MAAMA,EAAMkC,c","file":"static/js/main.97e555e5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\n\nexport default class clock extends Component {\n  state = {\n    time: null,\n  };\n  componentDidMount() {\n    this.interval = setInterval(\n      () => this.setState({ time: moment().format(\"ddd DD MMM hh:mm/ss\") }),\n      100\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return <p style={{ color: \"yellow\" }}>{this.state.time}</p>;\n  }\n}\n","import React from \"react\";\n\nfunction scorecard(props) {\n  console.log(props);\n\n  return (\n    <div className=\"scoresGrid\">\n      <div style={{ color: \"#27f9f9\" }}>{props.data.homeTeam.name}</div>\n      <div style={{ textAlign: \"center\" }}>\n        {props.data.score.fullTime.homeTeam}\n      </div>\n      <div style={{ textAlign: \"center\" }}>-</div>\n      <div style={{ textAlign: \"center\" }}>\n        {props.data.score.fullTime.awayTeam}\n      </div>\n      <div style={{ color: \"#27f9f9\" }}>{props.data.awayTeam.name}</div>\n\n      {/* <div>\n        <p>Cole 12, 42</p>\n      </div>\n      <div />\n      <div />\n      <div />\n      <div>\n        <p>Bergkamp 17</p>\n        <p>Anelka 84</p>\n      </div> */}\n    </div>\n  );\n}\n\nexport default scorecard;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./components/clock\";\nimport Clock from \"./components/clock\";\nimport ScoreCard from \"./components/scorecard\";\nconst axios = require(\"axios\");\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      matches: [],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\n        \"https://api.football-data.org/v2/competitions/PL/matches?status=FINISHED\",\n        {\n          headers: { \"X-Auth-Token\": \"602aec7271c543379a6c3f785e1df50f\" },\n        }\n      )\n      .then((response) => {\n        const data = response.data.matches;\n        this.setState({\n          isLoaded: true,\n          matches: data,\n        });\n        console.log(response);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function () {\n        // always executed\n      });\n  }\n\n  render() {\n    const { matches } = this.state;\n    const matchList = matches.length ? (\n      <div>\n        {matches\n          .slice(matches.length - 10, matches.length)\n          .reverse()\n          .map((data) => (\n            <ScoreCard data={data} />\n          ))}\n      </div>\n    ) : (\n      <div>No Matches Shown</div>\n    );\n\n    return (\n      <div className=\"App\">\n        <div className={\"topBar\"} style={{ float: \"right\" }}>\n          <div style={{ display: \"-webkit-inline-box\", float: \"right\" }}>\n            <p style={{ paddingRight: \"10px\" }}>CEEFAX 1 303 </p>\n            <Clock />\n          </div>\n        </div>\n\n        <div className={\"titleContainer\"}>\n          <div className={\"bbcTitle\"}>\n            <h1>B</h1>\n          </div>\n          <div className={\"bbcTitle\"}>\n            <h1>B</h1>\n          </div>\n          <div className={\"bbcTitle\"}>\n            <h1>C</h1>\n          </div>\n          <div className={\"footballTitle\"}>\n            <h1 className={\"BBCheader\"} style={{ color: \"#0efe05\" }}>\n              FOOTBALL\n            </h1>\n          </div>\n        </div>\n        <h2 style={{ color: \"#30d91e\", fontSize: \"20px\", paddingTop: \"10px\" }}>\n          PREMIERSHIP RESULTS/FIXTURES\n        </h2>\n        <div className={\"scores\"}>{matchList}</div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}